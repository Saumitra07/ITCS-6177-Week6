const express=require('express');

const swaggerUi = require('swagger-ui-express');
const swaggerDocument = require('./swagger.json');
const port=3001;

const mariadb=require('mariadb');

const app=express();
const cors=require('cors');

const { body, validationResult } = require('express-validator');

var bodyParser = require('body-parser');

const options = {
    swaggerDefinition: {
      // Like the one described here: https://swagger.io/specification/#infoObject
      info: {
        title: 'Personal test',
        version: '1.0.0',
        description: 'Test Express API with autogenerated swagger doc',
      },
      host:'137.184.211.211:3001',
      basePath:'/'
    },
    // List of files to be processes. You can also set globs './routes/*.js'
    apis: ['./server.js'],
  };



const pool = mariadb.createPool({
host:'localhost',
user:'root',
password:'root',
database:'sample',
port:3306,
connectionLimit:5
});



app.use(
  '/api-docs',
  swaggerUi.serve,
  swaggerUi.setup(swaggerDocument)
);
app.use(express.json());

app.use(express.urlencoded({extended:false}));

app.get('/',async (req,res)=>{
try {
        const sqlQuery = 'SELECT * from company';
        const rows = await pool.query(sqlQuery);
        res.status(200).json(rows);
    } catch (error) {
        res.status(400).send(error.message)
    }
  });





app.get('/companies',async (req,res)=>{
try {
        const sqlQuery = 'SELECT * from company';
        const rows = await pool.query(sqlQuery);
        res.status(200).json(rows);
        //res.send(rows);
    } catch (error) {
        res.status(400).send(error.message)
    }
  });
  app.post('/companies',body('COMPANY_ID').not().isEmpty().trim().escape(),body('COMPANY_NAME').not().isEmpty().trim().escape(),body('COMPANY_CITY').not().isEmpty().trim().escape(),async (req,res)=>{
    try {
              const errors = validationResult(req);
        if (!errors.isEmpty()) {
          return res.status(400).json({ errors: errors.array() });
    }
             const query = `INSERT INTO company (COMPANY_ID,COMPANY_NAME, COMPANY_CITY) VALUES ("${req.body.COMPANY_ID}","${req.body.COMPANY_NAME}","${req.body.COMPANY_CITY}");`;
            const result= await pool.query(query);
            res.redirect('/companies');
    
        } catch (error) {
            res.status(400).send(error.message)
        }
      });
    
    
    app.put('/companies',body('COMPANY_ID').not().isEmpty().trim().escape(),body('COMPANY_NAME').not().isEmpty().trim().escape(),body('COMPANY_CITY').not().isEmpty().trim().escape(),async (req,res)=>{
    try {
                      const errors = validationResult(req);
        if (!errors.isEmpty()) {
          return res.status(400).json({ errors: errors.array() });
    }
    
             const query= `UPDATE company SET COMPANY_ID="${req.body.COMPANY_ID}", COMPANY_NAME = "${req.body.COMPANY_NAME}",COMPANY_CITY = "${req.body.COMPANY_CITY}" WHERE COMPANY_ID = "${req.body.COMPANY_ID}";`
            const result= await pool.query(query);
            res.status(200).json('updated company');
    
        } catch (error) {
            res.status(400).send(error.message)
        }
      });
      app.patch('/companies',body('COMPANY_ID').not().isEmpty().trim().escape(),body('COMPANY_CITY').not().isEmpty().trim().escape(),async (req,res)=>{
        try {
                                const errors = validationResult(req);
            if (!errors.isEmpty()) {
              return res.status(400).json({ errors: errors.array() });
        }
        
                 const query= `UPDATE company SET COMPANY_CITY = "${req.body.COMPANY_CITY}" WHERE COMPANY_ID = "${req.body.COMPANY_ID}";`
                const result= await pool.query(query);
                res.status(200).json('updated company using patch');
        
            } catch (error) {
                res.status(400).send(error.message)
            }
          });
        
        
        
        
        app.delete('/companies/:id',async (req,res)=>{
        try{
        
                var id=req.params.id;
                const query=`DELETE from company where company_id='${id}'`;
                const result=await pool.query(query,id);
                if(!result.affectedRows)
                        {
                res.status(400).json('no company exists with this id');
        }
        res.status(200).send({
                    success: 'true',
                    message: 'company deleted successfully'
                  });
        
            } catch (error) {
                res.status(400).send(error.message)
            }
          });
        
          app.get('/orders',async (req,res)=>{
            try {
                    const sqlQuery = 'SELECT * from orders';
                    const rows = await pool.query(sqlQuery,req.params.id);
                    res.status(200).json(rows);
                } catch (error) {
                    res.status(400).send(error.message)
                }
              });
            
        
          app.listen(port,()=>{
            console.log('app is connected to port',port);
           });
                      